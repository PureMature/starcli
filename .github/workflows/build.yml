name: Build

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
    paths-ignore:
      - '**.md'
      - 'LICENSE'

env:
  OSEXT_MAP: '{"ubuntu-20.04": "linux", "macos-13": "mac_intel", "macos-14": "mac_apple", "windows-2022": "exe"}'
  CACHE_PREFIX: upload-${{ github.run_id }}-${{ github.run_attempt }}

defaults:
  run:
    shell: bash

permissions: read-all

jobs:
  build:
    name: Test with ${{ matrix.go-version }} on ${{ matrix.vm-os }}
    runs-on: ${{ matrix.vm-os }}
    strategy:
      max-parallel: 10
      fail-fast: false
      matrix:
        vm-os: [
          ubuntu-20.04,
          macos-13,
          macos-14,
          windows-2022
        ]
        go-version: [
          1.18.10,
          # 1.19.13,
          # 1.20.14,
          # 1.21.10,
          # 1.22.3,
        ]
    # Steps to execute
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
      - name: Go Build
        run: |
          export
          git status
          go version
          go mod download
          make --version
          make build
      - name: Test
        run: |
          make test
      - name: Preview
        env:
          OSEXT: ${{ fromJSON(env.OSEXT_MAP)[matrix.vm-os] }}
        run: |
          make preview
          make artifact

      - name: Upload Artifact
        if: ${{ startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v2
        with:
          name: distbed-dev
          path: _upload

      - name: Analyze
        if: ${{ runner.os == 'macOS' || runner.os == 'Linux' }}
        run: |
          # Setup
          if [[ ${{ runner.os }} == 'Linux' ]]; then
            wget -cqL https://github.com/XAMPPRocky/tokei/releases/download/v12.1.2/tokei-i686-unknown-linux-musl.tar.gz -O tokei.tgz
            wget -cqL https://github.com/mgechev/revive/releases/download/v1.3.7/revive_linux_amd64.tar.gz -O revive.tgz
          elif [[ ${{ runner.os }} == 'macOS' ]]; then
            wget -cqL https://github.com/XAMPPRocky/tokei/releases/download/v12.1.2/tokei-x86_64-apple-darwin.tar.gz -O tokei.tgz
            wget -cqL https://github.com/mgechev/revive/releases/download/v1.3.7/revive_darwin_amd64.tar.gz -O revive.tgz
          fi
          tar zxf tokei.tgz tokei && chmod +x tokei && $SUDO mv tokei /usr/local/bin && rm tokei.tgz
          tar zxf revive.tgz revive && chmod +x revive && $SUDO mv revive /usr/local/bin && rm revive.tgz
          wget -cqL https://raw.githubusercontent.com/1set/meta/master/revive.toml -O revive.toml
          # Analyze
          echo "# Analysis on ${{ runner.os }}" > $GITHUB_STEP_SUMMARY
          uname -a >> $GITHUB_STEP_SUMMARY
          # --- count lines of code
          echo "## Tokei Result" >> $GITHUB_STEP_SUMMARY
          printf '\n```\n' >> $GITHUB_STEP_SUMMARY
          tokei >> $GITHUB_STEP_SUMMARY
          printf '```\n\n' >> $GITHUB_STEP_SUMMARY
          # --- lint
          echo "## Revive Result" >> $GITHUB_STEP_SUMMARY
          printf '\n```\n' >> $GITHUB_STEP_SUMMARY
          revive -config revive.toml -formatter friendly ./... >> $GITHUB_STEP_SUMMARY
          printf '```\n\n' >> $GITHUB_STEP_SUMMARY
          # --- file size
          echo "## File Size" >> $GITHUB_STEP_SUMMARY
          printf '\n```bash\n' >> $GITHUB_STEP_SUMMARY
          export CMDDIR=_upload
          ls -laSh "$CMDDIR" >> $GITHUB_STEP_SUMMARY
          printf '```\n\n```bash\n' >> $GITHUB_STEP_SUMMARY
          if [[ ${{ runner.os }} == 'Linux' ]]; then
            find "$CMDDIR" -maxdepth 1 -type f -size +524288c | xargs -I {} stat --format="%n %s" {} | awk '{printf "%s\t\t%sB\n", $1, $2}' >> $GITHUB_STEP_SUMMARY
          elif [[ ${{ runner.os }} == 'macOS' ]]; then
            find "$CMDDIR" -maxdepth 1 -type f -size +524288c | xargs -I {} stat -f "%N %z" {} | awk '{printf "%s\t\t%sB\n", $1, $2}' >> $GITHUB_STEP_SUMMARY
          fi
          printf '```\n\n' >> $GITHUB_STEP_SUMMARY
